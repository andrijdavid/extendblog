$(document).ready(function(){module("Library Methods"),test("accounting.unformat()",function(){equals(accounting.unformat("$12,345,678.90 USD"),12345678.9,"Can unformat currency to float"),equals(accounting.unformat(1234567890),1234567890,"Returns same value when passed an integer"),equals(accounting.unformat("string"),0,"Returns 0 for a string with no numbers"),equals(accounting.unformat({joss:1}),0,"Returns 0 for object"),accounting.settings.number.decimal=",",equals(accounting.unformat("100,00"),100,"Uses decimal separator from settings"),equals(accounting.unformat("�1.000,00"),1e3,"Uses decimal separator from settings"),accounting.settings.number.decimal="."}),test("accounting.toFixed()",function(){equals(accounting.toFixed(54321,5),"54321.00000","Performs basic float zero-padding"),equals(accounting.toFixed(.615,2),"0.62",'Rounds 0.615 to "0.62" instead of "0.61"')}),test("accounting.formatNumber()",function(){equals(accounting.formatNumber(4999.99,2,".",","),"4.999,99","Custom precision and decimal/thousand separators are a-ok"),equal(accounting.formatNumber(5318008,{precision:3,thousand:"__",decimal:"--"}),"5__318__008--000","Correctly handles custom precision and separators passed in via second param options object"),equals(accounting.formatNumber(.615,2),"0.62",'Rounds 0.615 up to "0.62" with precision of 2');var t=[8008135,[1234,5678],1e3],a=[accounting.formatNumber(8008135),[accounting.formatNumber(1234),accounting.formatNumber(5678)],accounting.formatNumber(1e3)],o=accounting.formatNumber(t);equals(o.toString(),a.toString(),"can recursively format multi-dimensional arrays")}),test("accounting.formatMoney()",function(){equals(accounting.formatMoney(12345678),"$12,345,678.00","Default usage with default parameters is ok"),equals(accounting.formatMoney(4999.99,"$ ",2,".",","),"$ 4.999,99","custom formatting via straight params works ok"),equals(accounting.formatMoney(-5e5,"� ",0),"� -500,000","negative values, custom params, works ok"),equals(accounting.formatMoney(5318008,{symbol:"GBP",format:"%v %s"}),"5,318,008.00 GBP","`format` parameter is observed in string output"),equals(accounting.formatMoney(1e3,{format:"test %v 123 %s test"}),"test 1,000.00 123 $ test","`format` parameter is observed in string output, despite being rather strange");var t={pos:"%s %v",neg:"%s (%v)",zero:"%s  --"};equals(accounting.formatMoney(0,{symbol:"GBP",format:t}),"GBP  --","`format` parameter provided given as an object with `zero` format, correctly observed in string output"),equals(accounting.formatMoney(-1e3,{symbol:"GBP",format:t}),"GBP (1,000.00)","`format` parameter provided given as an object with `neg` format, correctly observed in string output"),equals(accounting.formatMoney(1e3,{symbol:"GBP",format:{neg:"--%v %s"}}),"GBP1,000.00","`format` parameter provided, but only `neg` value provided - positive value should be formatted by default format (%s%v)"),accounting.settings.currency.format="%s%v",accounting.formatMoney(0,{format:""}),equals(typeof accounting.settings.currency.format,"object","`settings.currency.format` default string value should be reformatted to an object, the first time it is used")}),test("accounting.formatColumn()",function(){var t=[123,12345];equals(accounting.formatColumn(t,"$ ",0).toString(),["$    123","$ 12,345"].toString(),"formatColumn works as expected");var t=[[1,100],[900,9]];equals(accounting.formatColumn(t).toString(),[["$  1.00","$100.00"],["$900.00","$  9.00"]].toString(),"formatcolumn works on multi-dimensional array");var a=accounting.formatColumn([Math.random(),1e3*Math.random(),1e7*Math.random()]);ok(a[0].length===a[2].length&&a[1].length===a[2].length,"formatColumn() with 3 random numbers returned strings of matching length");var a=accounting.formatColumn([Math.random(),1e3*Math.random(),1e7*Math.random()],{format:"(%v] --++== %s",thousand:")(",decimal:")[",precision:3});ok(a[0].length===a[2].length&&a[1].length===a[2].length,"formatColumn() with 3 random numbers returned strings of matching length, even with a weird custom `format` parameter")})});